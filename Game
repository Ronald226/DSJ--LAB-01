import pygame
import math
import random
from pygame import mixer

pygame.init()

screen = pygame.display.set_mode((800, 600))
background = pygame.image.load('background.jpg')
mixer.music.load('background.wav')
mixer.music.play(-1)

pygame.display.set_caption("Space Invaders")
icon = pygame.image.load('ufo.png')
pygame.display.set_icon(icon)

# Jugador
playerImg = pygame.image.load('player.png')
playerX = 370
playerY = 480
playerX_change = 0
player_speed = 3

# Enemigos
enemyImg = []
enemyX = []
enemyY = []
enemyX_change = []
enemyY_change = []
num_of_enemies = 6
for i in range(num_of_enemies):
    enemyImg.append(pygame.image.load('enemy.png'))
    enemyX.append(random.randint(0, 735))
    enemyY.append(random.randint(50, 150))
    enemyX_change.append(0.3)
    enemyY_change.append(40)


# Bala
bulletImg = pygame.image.load('bullet.png')
bulletX = 0
bulletY = 480
bulletY_change = 10
bullet_state = "ready"

# Power-Up
powerupImg = pygame.image.load('powerup.png')
powerupX = random.randint(0, 736)
powerupY = -64
powerupY_change = 0.3
powerup_state = "falling"

# Puntuación y vidas
score_value = 0
lives = 3
level = 1
font = pygame.font.Font('freesansbold.ttf', 32)
over_font = pygame.font.Font('freesansbold.ttf', 64)
game_over = False

# Funciones de visualización
def show_score():
    score = font.render("Score: " + str(score_value), True, (0, 255, 0))
    screen.blit(score, (10, 10))

def show_lives():
    lives_text = font.render("Lives: " + str(lives), True, (255, 0, 0))
    screen.blit(lives_text, (650, 10))

def show_level():
    level_text = font.render("Level: " + str(level), True, (255, 255, 0))
    screen.blit(level_text, (350, 10))

def game_over_text():
    over_text = over_font.render("GAME OVER", True, (255, 0, 0))
    screen.blit(over_text, (200, 250))
    restart_text = font.render("Presiona ENTER para reiniciar", True, (255, 255, 255))
    screen.blit(restart_text, (220, 330))

def player(x, y):
    screen.blit(playerImg, (x, y))

def enemy(x, y, i):
    screen.blit(enemyImg[i], (x, y))

def fire_bullet(x, y):
    global bullet_state
    bullet_state = "fire"
    screen.blit(bulletImg, (x + 16, y + 10))

def show_powerup(x, y):
    screen.blit(powerupImg, (x, y))

def isCollision(enemyX, enemyY, bulletX, bulletY):
    distance = math.hypot(enemyX - bulletX, enemyY - bulletY)
    return distance < 27

def isPowerupCollision(playerX, playerY, powerupX, powerupY):
    distance = math.hypot(playerX - powerupX, playerY - powerupY)
    return distance < 32

# Función para reiniciar juego
def reset_game():
    global score_value, lives, level, playerX, playerX_change, bulletY, bullet_state
    global powerupX, powerupY, powerup_state, game_over
    score_value = 0
    lives = 3
    level = 1
    playerX = 370
    playerX_change = 0
    bulletY = 480
    bullet_state = "ready"
    for i in range(num_of_enemies):
        enemyX[i] = random.randint(0, 735)
        enemyY[i] = random.randint(50, 150)
        enemyX_change[i] = 0.3
    powerupX = random.randint(0, 736)
    powerupY = -64
    powerup_state = "falling"
    game_over = False

# Bucle del juego
running = True
while running:
    screen.fill((0, 0, 0))
    screen.blit(background, (0, 0))

    # Eventos
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            running = False

        # Movimiento y disparos
        if event.type == pygame.KEYDOWN:
            if not game_over:
                if event.key == pygame.K_LEFT:
                    playerX_change = -player_speed
                if event.key == pygame.K_RIGHT:
                    playerX_change = player_speed
                if event.key == pygame.K_SPACE:
                    if bullet_state == "ready":
                        mixer.Sound('laser.wav').play()
                        bulletX = playerX
                        fire_bullet(bulletX, bulletY)
            else:
                if event.key == pygame.K_RETURN:
                    reset_game()

        if event.type == pygame.KEYUP:
            if event.key in [pygame.K_LEFT, pygame.K_RIGHT]:
                playerX_change = 0

    if not game_over:
        # Movimiento jugador
        playerX += playerX_change
        playerX = max(0, min(playerX, 736))

        # Powerup
        if powerup_state == "falling":
            powerupY += powerupY_change
            show_powerup(powerupX, powerupY)

            if isPowerupCollision(playerX, playerY, powerupX, powerupY):
                powerup_state = "collected"
                score_value += 5
                powerupX = random.randint(0, 736)
                powerupY = -64
                powerup_state = "falling"

        # Enemigos
        for i in range(num_of_enemies):
            if enemyY[i] > 440:
                lives -= 1
                mixer.Sound('explosion.wav').play()
                if lives == 0:
                    game_over = True
                    break
                else:
                    for j in range(num_of_enemies):
                        enemyX[j] = random.randint(0, 735)
                        enemyY[j] = random.randint(50, 150)

            enemyX[i] += enemyX_change[i]
            if enemyX[i] <= 0 or enemyX[i] >= 736:
                enemyX_change[i] *= -1.2
                enemyY[i] += enemyY_change[i]

            if isCollision(enemyX[i], enemyY[i], bulletX, bulletY):
                mixer.Sound('explosion.wav').play()
                bulletY = 480
                bullet_state = "ready"
                score_value += 1
                enemyX[i] = random.randint(0, 735)
                enemyY[i] = random.randint(50, 150)

                if score_value % 10 == 0:
                    level += 1
                    for k in range(num_of_enemies):
                        enemyX_change[k] *= 1.2

            enemy(enemyX[i], enemyY[i], i)

        # Movimiento bala
        if bullet_state == "fire":
            fire_bullet(bulletX, bulletY)
            bulletY -= bulletY_change
            if bulletY <= 0:
                bulletY = 480
                bullet_state = "ready"

        player(playerX, playerY)
        show_score()
        show_lives()
        show_level()
    else:
        game_over_text()

    pygame.display.update()
